name: Auto add issues to the related GitHub Project Beta Board of a repository

on:
  workflow_call:
    inputs:
      project_number:
        required: true
        type: number
      organization:
        required: false
        type: string
        default: commercetools
    secrets:
      # app_id and private_key for:
      # https://github.com/tibdex/github-app-token
      app_id:
        required: true
      private_key:
        required: true

jobs:
  track_issue:
    runs-on: ubuntu-latest
    steps:
      # Get GH token via CT project beta automation GH app
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1.7.0
        with:
          app_id:  ${{ secrets.app_id }}
          private_key: ${{ secrets.private_key }}

      # Get projectId
      # query() -> organization() -> projectV2()
      # https://docs.github.com/en/enterprise-cloud@latest/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects#finding-the-node-id-of-an-organization-project
      - name: Get project data
        id: get_project_data
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          gh api graphql -f query='
            query(
              $org_login: String!,
              $project_number: Int!
            ) {
              organization(login: $org_login) {
                projectV2(number: $project_number) {
                  id
                }
              }
            }' -f org_login=${{ inputs.organization }} -F project_number=${{ inputs.project_number }} > project_data.json
          echo "::set-output name=project_id::$(jq '.data.organization.projectV2.id' project_data.json)"

      # Create project item
      # mutation() -> addProjectV2ItemById()
      # https://docs.github.com/en/graphql/reference/mutations#addprojectv2itembyid
      - name: Create project item
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          gh api graphql -f query='
            mutation(
              $project_id: ID!,
              $content_id: ID!
            ) {
              addProjectV2ItemById(input: {
                projectId: $project_id,
                contentId: $content_id
              }) { item { id } }
            }' -f project_id=${{ steps.get_project_data.outputs.project_id }} -f content_id=${{ github.event.issue.node_id }} > /dev/null
